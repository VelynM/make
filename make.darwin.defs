#version00.00.01

DEFAULT_CC              ?= gcc
DEFAULT_LD              ?= ld
DEFAULT_CFLAGS          ?=
DEFAULT_LDLIBS          ?=

BASE_CC                 = $(call get_project_value,base_cc,$(DEFAULT_CC))
BASE_LD                 = $(call get_project_value,base_ld,$(DEFAULT_LD))
BASE_CFLAGS             = $(call get_project_value,base_cflags,$(DEFAULT_CFLAGS))
BASE_LDLIBS             = $(call get_project_value,base_ldlibs,$(DEFAULT_LDLIBS))

BASE_CFLAGS            += -DPLATFORM_$(PLATFORM)
BASE_RELEASE_CFLAGS    += -O2

BASE_CFLAGS            += -pipe -g -std=c99 -Wall -pedantic -W \
                          -Werror-implicit-function-declaration -Wc++-compat
BASE_CFLAGS            += -Wstrict-prototypes -Wmissing-prototypes \
                          -Wmissing-declarations -Wno-float-equal -Wundef \
                          -Wendif-labels -Wshadow -Wpointer-arith \
                          -Wbad-function-cast -Wcast-qual -Wcast-align \
                          -Wwrite-strings -Wsign-compare -Waggregate-return \
                          -Wmissing-noreturn -Wmissing-format-attribute \
                          -Wredundant-decls -Wnested-externs -Winline \
                          -Wdisabled-optimization -Wstrict-aliasing \
                          -Wempty-body
BASE_CFLAGS            += -Wstrict-aliasing=2 -Wstrict-overflow=5
#BASE_CFLAGS            += -Wunsafe-loop-optimizations # GCC only
#BASE_CFLAGS            += -Wconversion
BASE_CFLAGS            += -Wfatal-errors

# clang only, catch undefined behavior
#CFLAGS += -fcatch-undefined-behavior

# trap integer overflow
#BASE_CFLAGS += -ftrapv

# disable exceptions
BASE_CFLAGS            += -fno-exceptions
#BASE_CFLAGS            += -fno-rtti

# use hidden symbol visibility
BASE_CFLAGS            += -fvisibility=hidden

# clang and llvm-gcc, i386 and x86_64, enable link-time optimizations
#BASE_CFLAGS            += -flto

# specific optimizations
#BASE_RELEASE_CFLAGS     += -freorder-blocks
#BASE_RELEASE_CFLAGS     += -fsched-interblock
#BASE_RELEASE_CFLAGS     += -funsafe-loop-optimizations # GCC only
#BASE_RELEASE_CFLAGS     += -fmerge-all-constants
BASE_RELEASE_CFLAGS     += -ftree-vectorize
BASE_RELEASE_CFLAGS     += -ffast-math
#BASE_RELEASE_CFLAGS     += -fno-fast-math
#BASE_RELEASE_CFLAGS     += -momit-leaf-frame-pointer
#BASE_RELEASE_CFLAGS     += -fno-tree-pre
#BASE_RELEASE_CFLAGS     += -falign-loops
#BASE_RELEASE_CFLAGS     += -funroll-loops
#BASE_RELEASE_CFLAGS     += -fgcse-sm

# omit frame pointer
ifneq ($(BUILDTYPE),profile)
  BASE_RELEASE_CFLAGS     += -fomit-frame-pointer
endif

# strict aliasing
BASE_RELEASE_CFLAGS     += -fstrict-aliasing

# strict overflow
BASE_RELEASE_CFLAGS     += -fstrict-overflow

# stack protector / mudflaps
#BASE_CFLAGS            += -Wstack-protector -fstack-protector-all -fmudflap
#BASE_LDLIBS            += -fmudflap -lmudflap -fstack-protector-all

# architecture-specific settings
ifeq ($(ARCHITECTURE),i386)
 BASE_CFLAGS            += -m32 -arch i386
 BASE_RELEASE_CFLAGS    += -mdynamic-no-pic -march=pentium4 -mmmx -msse -msse2 -mfpmath=sse
 BASE_LDLIBS            += -m32 -arch i386
endif

ifeq ($(ARCHITECTURE),x86_64)
 BASE_CFLAGS            += -m64 -arch x86_64
 BASE_RELEASE_CFLAGS    += -mdynamic-no-pic -march=core2 -mmmx -msse -msse2 -msse3 -mssse3 -msse4 -msse4.1 -mfpmath=sse
 BASE_LDLIBS            += -m64 -arch x86_64
endif

ifeq ($(ARCHITECTURE),ppc)
 BASE_SDK_VERSION       ?= 10.5
 BASE_CFLAGS            += -m32 -arch ppc
 BASE_RELEASE_CFLAGS    += -mdynamic-no-pic -mcpu=G4 -mtune=7450 -mpowerpc -maltivec -mabi=altivec -mpowerpc-gfxopt
 BASE_LDLIBS            += -m32 -arch ppc
endif

ifeq ($(ARCHITECTURE),ppc64)
 BASE_SDK_VERSION       ?= 10.5
 BASE_CFLAGS            += -m64 -arch ppc64
 BASE_RELEASE_CFLAGS    += -mdynamic-no-pic -mcpu=G5 -mtune=970 -mpowerpc64 -maltivec -mabi=altivec -mpowerpc-gfxopt -mpowerpc-gpopt
 BASE_LDLIBS            += -m64 -arch ppc64
endif

# OS X SDK version
ifeq ($(BASE_SDK_VERSION),10.5)
 BASE_CFLAGS            += -mmacosx-version-min=10.5 -isysroot /Developer/SDKs/MacOSX10.5.sdk/
 BASE_LDLIBS            += -mmacosx-version-min=10.5 -isysroot /Developer/SDKs/MacOSX10.5.sdk/
endif

ifeq ($(BASE_SDK_VERSION),10.6)
 BASE_CFLAGS            += -mmacosx-version-min=10.6
 BASE_LDLIBS            += -mmacosx-version-min=10.6
endif

ifeq ($(BASE_SDK_VERSION),10.7)
 BASE_CFLAGS            += -mmacosx-version-min=10.7
 BASE_LDLIBS            += -mmacosx-version-min=10.7
endif

ifeq ($(BASE_SDK_VERSION),10.8)
 BASE_CFLAGS            += -mmacosx-version-min=10.8
 BASE_LDLIBS            += -mmacosx-version-min=10.8
endif

ifeq ($(BASE_SDK_VERSION),10.9)
 BASE_CFLAGS            += -mmacosx-version-min=10.9
 BASE_LDLIBS            += -mmacosx-version-min=10.9
endif

ifeq ($(BASE_SDK_VERSION),10.10)
 BASE_CFLAGS            += -mmacosx-version-min=10.10
 BASE_LDLIBS            += -mmacosx-version-min=10.10
endif

DEFAULT_DEBUG_CC        = $(BASE_CC)
DEFAULT_DEBUG_LD        = $(BASE_LD)
DEFAULT_DEBUG_CFLAGS    = $(BASE_CFLAGS) -DDEBUG
DEFAULT_DEBUG_LDLIBS    = $(BASE_LDLIBS)

DEFAULT_RELEASE_CC      = $(BASE_CC)
DEFAULT_RELEASE_LD      = $(BASE_LD)
DEFAULT_RELEASE_CFLAGS  = $(BASE_CFLAGS) $(BASE_RELEASE_CFLAGS) -DNDEBUG
DEFAULT_RELEASE_LDLIBS  = $(BASE_LDLIBS)

DEFAULT_PROFILE_CC      = $(BASE_CC)
DEFAULT_PROFILE_LD      = $(BASE_LD)
DEFAULT_PROFILE_CFLAGS  = $(BASE_CFLAGS) $(BASE_RELEASE_CFLAGS) -DNDEBUG -DPROFILE -pg
DEFAULT_PROFILE_LDLIBS  = $(BASE_LDLIBS) -pg

DEFAULT_FINAL_CC        = $(BASE_CC)
DEFAULT_FINAL_LD        = $(BASE_LD)
DEFAULT_FINAL_CFLAGS    = $(BASE_CFLAGS) $(BASE_RELEASE_CFLAGS) -DNDEBUG -DFINAL
DEFAULT_FINAL_LDLIBS    = $(BASE_LDLIBS) -Wl,-dead_strip -Wl,-dead_strip_dylibs
