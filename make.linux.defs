#version00.00.01

DEFAULT_CC                 ?= gcc
DEFAULT_LD                 ?= ld
DEFAULT_CFLAGS             ?=
DEFAULT_LDLIBS             ?=
DEFAULT_OPTIMIZATION_LEVEL ?= 2
DEFAULT_ENABLE_LTO         ?= no
DEFAULT_FLOAT_ABI          ?= softfp
DEFAULT_FPU_TYPE           ?= default
DEFAULT_CPU_TYPE           ?= default

BASE_CC                 = $(call get_project_value,base_cc,$(DEFAULT_CC))
BASE_LD                 = $(call get_project_value,base_ld,$(DEFAULT_LD))
BASE_CFLAGS             = $(call get_project_value,base_cflags,$(DEFAULT_CFLAGS))
BASE_LDLIBS             = $(call get_project_value,base_ldlibs,$(DEFAULT_LDLIBS))
BASE_OPTIMIZATION_LEVEL = $(strip $(call get_project_value,base_optimization_level,$(DEFAULT_OPTIMIZATION_LEVEL)))
BASE_ENABLE_LTO         = $(strip $(call get_project_value,base_enable_lto,$(DEFAULT_ENABLE_LTO)))
BASE_FLOAT_ABI          = $(strip $(call get_project_value,base_float_abi,$(DEFAULT_FLOAT_ABI)))
BASE_FPU_TYPE           = $(strip $(call get_project_value,base_fpu_type,$(DEFAULT_FPU_TYPE)))
BASE_CPU_TYPE           = $(strip $(call get_project_value,base_cpu_type,$(DEFAULT_CPU_TYPE)))

BASE_CFLAGS            += -DPLATFORM_$(PLATFORM)
BASE_RELEASE_CFLAGS    += -O$(BASE_OPTIMIZATION_LEVEL)

BASE_CFLAGS            += -pipe -g -std=c99 -Wall -pedantic -W \
                          -Werror-implicit-function-declaration -Wc++-compat
BASE_CFLAGS            += -Wstrict-prototypes -Wmissing-prototypes \
                          -Wmissing-declarations -Wno-float-equal -Wundef \
                          -Wendif-labels -Wshadow -Wpointer-arith \
                          -Wbad-function-cast -Wcast-qual -Wcast-align \
                          -Wwrite-strings -Wsign-compare -Waggregate-return \
                          -Wmissing-noreturn -Wmissing-format-attribute \
                          -Wredundant-decls -Wnested-externs -Winline \
                          -Wdisabled-optimization -Wstrict-aliasing \
                          -Wempty-body
BASE_CFLAGS            += -Wstrict-aliasing=2 -Wstrict-overflow=5
BASE_CFLAGS            += -Wunsafe-loop-optimizations
#BASE_CFLAGS            += -Wconversion
BASE_CFLAGS            += -Wfatal-errors
BASE_CFLAGS            += -funit-at-a-time

# clang only, catch undefined behavior
#CFLAGS += -fcatch-undefined-behavior

# trap integer overflow
#BASE_CFLAGS += -ftrapv

# disable exceptions
BASE_CFLAGS            += -fno-exceptions
#BASE_CFLAGS            += -fno-rtti

# use hidden symbol visibility
BASE_CFLAGS            += -fvisibility=hidden

# specific optimizations
#BASE_RELEASE_CFLAGS     += -freorder-blocks
#BASE_RELEASE_CFLAGS     += -fsched-interblock
#BASE_RELEASE_CFLAGS     += -funsafe-loop-optimizations # GCC only
#BASE_RELEASE_CFLAGS     += -fmerge-all-constants
BASE_RELEASE_CFLAGS     += -ftree-vectorize
BASE_RELEASE_CFLAGS     += -ffast-math
BASE_RELEASE_CFLAGS     += -funsafe-math-optimizations
#BASE_RELEASE_CFLAGS     += -fno-fast-math
#BASE_RELEASE_CFLAGS     += -momit-leaf-frame-pointer
#BASE_RELEASE_CFLAGS     += -fno-tree-pre
#BASE_RELEASE_CFLAGS     += -falign-loops
#BASE_RELEASE_CFLAGS     += -funroll-loops
#BASE_RELEASE_CFLAGS     += -fgcse-sm
#BASE_RELEASE_CFLAGS     += -floop-interchange -floop-strip-mine -floop-block

# omit frame pointer
ifneq ($(BUILDTYPE),profile)
  BASE_RELEASE_CFLAGS     += -fomit-frame-pointer
endif

# strict aliasing
BASE_RELEASE_CFLAGS     += -fstrict-aliasing

# strict overflow
BASE_RELEASE_CFLAGS     += -fstrict-overflow

# stack protector / mudflaps
#BASE_CFLAGS            += -Wstack-protector -fstack-protector-all -fmudflap
#BASE_LDLIBS            += -fmudflap -lmudflap -fstack-protector-all

# architecture-specific settings
ifeq ($(ARCHITECTURE),i386)
 BASE_CFLAGS            += -m32
 BASE_RELEASE_CFLAGS    += -march=pentium4 -mmmx -msse -msse2 -mfpmath=sse
 BASE_LDLIBS            += -m32
endif

ifeq ($(ARCHITECTURE),x86_64)
 BASE_CFLAGS            += -m64
 BASE_RELEASE_CFLAGS    += -march=core2 -mmmx -msse -msse2 -msse3 -mssse3 -msse4 -msse4.1 -mfpmath=sse
 BASE_LDLIBS            += -m64
endif

ifeq ($(BASE_FLOAT_ABI),default)
 BASE_FLOAT_ABI         = softfp
endif

ifeq ($(BASE_FPU_TYPE),default)
ifeq ($(ARCHITECTURE),armv6)
 BASE_FPU_TYPE          = vfp
endif
ifeq ($(ARCHITECTURE),armv7)
 BASE_FPU_TYPE          = neon
endif
endif

ifeq ($(BASE_CPU_TYPE),default)
ifeq ($(ARCHITECTURE),armv6)
 BASE_CPU_TYPE          = arm1176jzf-s
endif
ifeq ($(ARCHITECTURE),armv7)
 BASE_CPU_TYPE          = cortex-a8
endif
endif

ifeq ($(ARCHITECTURE),armv6)
 BASE_CFLAGS           += -mfloat-abi=$(BASE_FLOAT_ABI) -mfpu=$(BASE_FPU_TYPE) -mcpu=$(BASE_CPU_TYPE)
 BASE_LDLIBS           += -mfloat-abi=$(BASE_FLOAT_ABI) -mfpu=$(BASE_FPU_TYPE) -mcpu=$(BASE_CPU_TYPE)
endif

ifeq ($(ARCHITECTURE),armv7)
 BASE_CFLAGS           += -mfloat-abi=$(BASE_FLOAT_ABI) -mfpu=$(BASE_FPU_TYPE) -mcpu=$(BASE_CPU_TYPE)
 BASE_LDLIBS           += -mfloat-abi=$(BASE_FLOAT_ABI) -mfpu=$(BASE_FPU_TYPE) -mcpu=$(BASE_CPU_TYPE)
endif

# lto (only enabled for final builds)
ifeq ($(strip $(BASE_ENABLE_LTO)),yes)
ifeq ($(BUILDTYPE),final)
 BASE_RELEASE_CFLAGS   += -flto
 BASE_LDLIBS           += $(BASE_CFLAGS) $(BASE_RELEASE_CFLAGS)
endif
endif

DEFAULT_DEBUG_CC        = $(BASE_CC)
DEFAULT_DEBUG_LD        = $(BASE_LD)
DEFAULT_DEBUG_CFLAGS    = $(BASE_CFLAGS) -DDEBUG
DEFAULT_DEBUG_LDLIBS    = $(BASE_LDLIBS)

DEFAULT_RELEASE_CC      = $(BASE_CC)
DEFAULT_RELEASE_LD      = $(BASE_LD)
DEFAULT_RELEASE_CFLAGS  = $(BASE_CFLAGS) $(BASE_RELEASE_CFLAGS) -DNDEBUG
DEFAULT_RELEASE_LDLIBS  = $(BASE_LDLIBS)

DEFAULT_PROFILE_CC      = $(BASE_CC)
DEFAULT_PROFILE_LD      = $(BASE_LD)
DEFAULT_PROFILE_CFLAGS  = $(BASE_CFLAGS) $(BASE_RELEASE_CFLAGS) -DNDEBUG -DPROFILE -pg
DEFAULT_PROFILE_LDLIBS  = $(BASE_LDLIBS) -pg

DEFAULT_FINAL_CC        = $(BASE_CC)
DEFAULT_FINAL_LD        = $(BASE_LD)
DEFAULT_FINAL_CFLAGS    = $(BASE_CFLAGS) $(BASE_RELEASE_CFLAGS) -DNDEBUG -DFINAL
DEFAULT_FINAL_LDLIBS    = $(BASE_LDLIBS)
